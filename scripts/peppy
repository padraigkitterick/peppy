#!/usr/bin/python
"""Implementation of Steve Gibson's "Perfect Paper Passwords" (PPP)

Generates sequences of pseudo-random one-time passwords based on a
specified passphrase or a 64-character sequence key.

For further information see <http://www.grc.com/ppp.htm>

Copyright (C) 2009 Padraig Kitterick <info@padraigkitterick.com>
All rights reserved.

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.
"""
import sys
from optparse import OptionParser, OptionGroup
from hashlib import sha256

import peppy

if __name__ == '__main__':
    usage = "usage: %prog [options] [-k KEY|-p PHRASE|-r]"
    version = "%prog 0.1a"
    parser = OptionParser(usage=usage, version=version)
    
    group = OptionGroup(parser, "Required Options",
                        "One, and only one, of the following must be specified.")
    group.add_option("-k", dest="key",
                      help="a %d-character hex sequence" % peppy.SHA256_DIGEST_SIZE, metavar="KEY")
    group.add_option("-p", dest="passphrase", metavar="PHRASE",
                      help="passphrase with which to create a KEY")
    group.add_option("-r", dest="randkey", action="store_true",
                     help="generate a pseudo-random key")
    parser.add_option_group(group)
    
    
    parser.add_option("-n", dest="numpass", default=70, metavar="NUM", type='int',
                      help="generate NUM passcodes (default: %default)")
    parser.add_option("-s", dest="startnum", default=0, metavar="N", type='int',
                      help="start at passcode N (default: %default)")
    parser.add_option("--page", dest="page", metavar="P", type='int',
                      help="display page P of NUM passcodes. Alternative to specifying a starting passcode number")
    parser.add_option("-l", dest="passlen", default=4, metavar="LEN", type='int',
                      help="generated passcodes of length LEN (default: %default)")
    parser.add_option("-c", dest="chars", default=peppy.CHARACTER_ARRAY, metavar="ARRAY",
                      help="ARRAY of characters to create passcodes with. Default: %default")
    parser.add_option("-v", dest="verbose", action="store_true",
                      help="Print information about the key, alphabet, and codes.")
    
    (options, args) = parser.parse_args()
    
    # We need a key, a passphrase, or the random key flag
    mandatory = [options.key, options.passphrase, options.randkey]
    if (not options.key and not options.passphrase and not options.randkey):
        parser.error("Please specify either -k, -p, or -r."
                     "\n\nSee --help for usage information.")
    elif len(filter(None, mandatory)) > 1:
        parser.error("Please specify only one of either -k, -p, or -r."
                     "\n\nSee --help for usage information.")
    
    if options.page and options.startnum is not 0:
        parser.error("Please specify either -s or --page but not both.");
    
    key = None
    key_bytes = []
    if options.passphrase:
        key = sha256(options.passphrase).hexdigest()
        key_bytes = peppy.hex2bytes(key)
    elif options.key:
        key_bytes = peppy.hex2bytes(options.key)
        if key_bytes:
            key = options.key
        
        if not key:
            sys.exit("Supplied key was not a valid %d character hex key." % peppy.SHA256_DIGEST_SIZE)
    else:
        key, key_bytes = peppy.generate_random_key()
        options.verbose = True
    
    if options.chars:
        chars = options.chars
    else:
        chars = CHARACTER_ARRAY
    
    numpass = options.numpass
    if options.page:
        startnum = (options.page-1) * numpass
    else:
        startnum = options.startnum
    passlen = options.passlen
    
    chars = list(chars)
    chars.sort()
    
    if options.verbose:
        print "Sequence key: %s" % key
        print "Using alphabet: %s" % ''.join(chars)
        print "Passcode length: %d" % passlen
    
    codes = peppy.create_passcodes(key_bytes, chars, startnum, numpass, passlen)
    
    if numpass == 1:
        print codes[0]
    else:
        peppy.display_codes(codes, options.page)
